// Generated by CoffeeScript 1.9.2
(function() {
  var app, bodyParser, globalUtcOffset, io, moment, timeObject;

  app = (require('express'))();

  bodyParser = require('body-parser');

  moment = require('moment');

  globalUtcOffset = moment().utcOffset();

  timeObject = function(utcOffset) {
    if (utcOffset == null) {
      utcOffset = globalUtcOffset;
    }
    return {
      time: moment().utcOffset(utcOffset).format(),
      timezone: utcOffset
    };
  };

  app.use(bodyParser.json({
    type: 'application/json',
    limit: '42mb'
  }));

  app.get('/time', function(req, res) {
    var offset;
    try {
      if (isNaN(offset = Number(req.query.timezone))) {
        throw '';
      }
      return res.json(timeObject(offset));
    } catch (_error) {
      return res.json(timeObject());
    }
  });

  app.post('/timezone', function(req, res) {
    try {
      if (Number === req.body.timezone.constructor) {
        globalUtcOffset = req.body.timezone;
        return res.status(204).end();
      }
    } catch (_error) {
      return res.status(400).end();
    }
  });

  app.listen(8080);

  io = require('socket.io')(8081);

  io.on('connection', function(socket) {
    var sendTime, socketsUtcOffset, t_start, timeout;
    socketsUtcOffset = void 0;
    socket.on('setTimezone', function(utcOffset) {
      if (Number !== utcOffset.constructor) {
        return;
      }
      return socketsUtcOffset = utcOffset;
    });
    socket.on('disconnect', function() {
      return clearTimeout(timeout);
    });
    sendTime = function() {
      var delay, t_start, timeout;
      socket.emit('time', timeObject(socketsUtcOffset));
      delay = new Date().getTime() - t_start;
      delay = delay > 10000 ? 10000 - (delay - 10000) : 10000;
      t_start = new Date().getTime();
      return timeout = setTimeout(sendTime, delay);
    };
    t_start = new Date().getTime();
    return timeout = setTimeout(sendTime, 10 * 1000);
  });

}).call(this);
